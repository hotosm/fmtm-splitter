{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FMTM Splitter","text":"<p> A utility for splitting an AOI into multiple tasks. </p> <p> </p> <p>\ud83d\udcd6 Documentation: https://hotosm.github.io/fmtm-splitter/</p> <p>\ud83d\udda5\ufe0f Source Code: https://github.com/hotosm/fmtm-splitter</p> <p>This is a program to split polygons into tasks using a variety of algorithms. It is a class that can be used by other projects, but also a standalone program. It was originally developed for the FMTM project, but then converted so it can be used by multiple projects.</p> <p>The class takes GeoJson Polygon as an input, and returns a GeoJson file Multipolygon of all the task boundaries.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install fmtm-splitter, you can use pip. Here are two options:</p> <ul> <li>Directly from the main branch:   <code>pip install git+https://github.com/hotosm/fmtm-splitter.git</code></li> </ul> <ul> <li>Latest on PyPi:   <code>pip install fmtm-splitter</code></li> </ul>"},{"location":"#splitting-types","title":"Splitting Types","text":""},{"location":"#split-by-square","title":"Split By Square","text":"<p>The default is to split the polygon into squares. The default dimension is 50 meters, but that is configurable. The outer square are clipped to the AOI boundary.</p>"},{"location":"#split-by-feature","title":"Split By Feature","text":"<p>The split by feature uses highway data extracted from OpenStreetMap, and uses it to generate non square task boundaries. It can also be adjusted to use the number of buildings in a task to adjust it's size.</p> <p></p>"},{"location":"#custom-sql-query","title":"Custom SQL query","text":"<p>It is also possible to supply a custom SQL query to generate the tasks.</p>"},{"location":"#usage-in-code","title":"Usage In Code","text":"<ul> <li>Either the FMTMSplitter class can be used directly, or the wrapper/   helper functions can be used for splitting.</li> </ul> <p>By square:</p> <pre><code>import json\nfrom fmtm_splitter.splitter import split_by_square\n\naoi = json.load(\"/path/to/file.geojson\")\n\nsplit_features = split_by_square(\n    aoi,\n    meters=100,\n)\n</code></pre> <p>The FMTM splitter algorithm:</p> <pre><code>import json\nfrom fmtm_splitter.splitter import split_by_sql\n\naoi = json.load(\"/path/to/file.geojson\")\nosm_extracts = json.load(\"/path/to/file.geojson\")\ndb = \"postgresql://postgres:postgres@localhost/postgres\"\n\nsplit_features = split_by_sql(\n    aoi,\n    db,\n    num_buildings=50,\n    osm_extract=osm_extracts,\n)\n</code></pre>"},{"location":"#database-connections","title":"Database Connections","text":"<ul> <li>The db parameter can be a connection string to start a new connection.</li> <li>Or an existing database connection can be reused.</li> <li>To do this, either the psycopg2 connection, or a DBAPI connection string   must be passed:</li> </ul> <p>psycopg2 example:</p> <pre><code>import psycopg2\nfrom fmtm_splitter.splitter import split_by_sql\n\ndb = psycopg2.connect(\"postgresql://postgres:postgres@localhost/postgres\")\n\nsplit_features = split_by_sql(\n    aoi,\n    db,\n    num_buildings=50,\n    osm_extract=osm_extracts,\n)\n</code></pre>"},{"location":"#usage-via-cli","title":"Usage Via CLI","text":"<p>Options:</p> <pre><code>-h, --help                       show this help message and exit\n-v, --verbose                    verbose output\n-o OUTFILE, --outfile OUTFILE    Output file from splitting\n-m METERS, --meters METERS       Size in meters if using square splitting\n-b BOUNDARY, --boundary BOUNDARY Polygon AOI\n-s SOURCE, --source SOURCE       Source data, Geojson or PG:[dbname]\n-c CUSTOM, --custom CUSTOM       Custom SQL query for database\n</code></pre> <p>This program splits a Polygon (the Area Of Interest) The data source for existing data can'be either the data extract used by the XLSForm, or a postgresql database.</p> <p>Examples:</p> <pre><code>fmtm-splitter -b AOI\nfmtm-splitter -v -b AOI -s data.geojson\nfmtm-splitter -v -b AOI -s PG:colorado\n\n# Where AOI is the boundary of the project as a polygon\n# And OUTFILE is a MultiPolygon output file,which defaults to fmtm.geojson\n# The task splitting defaults to squares, 50 meters across\n</code></pre>"},{"location":"#using-the-container-image","title":"Using the Container Image","text":"<ul> <li>fmtm-splitter scripts can be used via the pre-built container images.</li> <li>These images come with all dependencies bundled, so are simple to run.</li> <li>They do however require a database, to in this case we use docker compose.</li> </ul> <p>Run a specific command:</p> <pre><code>docker compose run --rm splitter fmtm-splitter &lt;flags&gt;\n</code></pre> <p>Run interactively (to use multiple commands):</p> <pre><code>docker compose run -it splitter bash\n\nfmtm-splitter\n</code></pre> <p>Note: the <code>output</code> directory in this repo is mounted in the container to <code>/opt/output</code>. To persist data, input and output should be placed here.</p>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#200-2024-12-12","title":"2.0.0 (2024-12-12)","text":""},{"location":"CHANGELOG/#feat","title":"Feat","text":"<ul> <li>merge polygons smaller than 35% of perfect square polygon to neighbouring polygon</li> </ul>"},{"location":"CHANGELOG/#fix","title":"Fix","text":"<ul> <li>Update command line args</li> <li>Update usage message for current reality</li> </ul>"},{"location":"CHANGELOG/#151-2024-10-30","title":"1.5.1 (2024-10-30)","text":""},{"location":"CHANGELOG/#fix_1","title":"Fix","text":"<ul> <li>typo in fmtm_splitter sql num_buildings substitution</li> </ul>"},{"location":"CHANGELOG/#150-2024-10-30","title":"1.5.0 (2024-10-30)","text":""},{"location":"CHANGELOG/#feat_1","title":"Feat","text":"<ul> <li>use geodetic conversion of meters to degrees</li> </ul>"},{"location":"CHANGELOG/#fix_2","title":"Fix","text":"<ul> <li>precommit errors</li> <li>updated the tasks count in test cases of split by square</li> <li>add type int in argument</li> <li>avoid appending empty clipped polygons</li> </ul>"},{"location":"CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>merge least feature count polygons with neighbouring polygons</li> </ul>"},{"location":"CHANGELOG/#140-2024-10-24","title":"1.4.0 (2024-10-24)","text":""},{"location":"CHANGELOG/#fix_3","title":"Fix","text":"<ul> <li>add missed unsimplifiedtaskpolygons to table drop</li> </ul>"},{"location":"CHANGELOG/#refactor_1","title":"Refactor","text":"<ul> <li>remove support for sqlalchemy connections (psycopg2 driver only)</li> </ul>"},{"location":"CHANGELOG/#132-2024-10-14","title":"1.3.2 (2024-10-14)","text":""},{"location":"CHANGELOG/#fix_4","title":"Fix","text":"<ul> <li>remove osm-extracts from split by square</li> <li>invalid inclusion of alias to get num_buildings by pre-commit</li> </ul>"},{"location":"CHANGELOG/#refactor_2","title":"Refactor","text":"<ul> <li>move old splitting algorithm parts --&gt; postgis_snippets</li> </ul>"},{"location":"CHANGELOG/#131-2024-09-22","title":"1.3.1 (2024-09-22)","text":""},{"location":"CHANGELOG/#fix_5","title":"Fix","text":"<ul> <li>merge holes with neighboring polygons</li> <li>If --extract is used, it needs to be passed to split_by_square()</li> </ul>"},{"location":"CHANGELOG/#refactor_3","title":"Refactor","text":"<ul> <li>pass args.data_extract and have parsing function handle it</li> </ul>"},{"location":"CHANGELOG/#130-2024-07-12","title":"1.3.0 (2024-07-12)","text":""},{"location":"CHANGELOG/#feat_2","title":"Feat","text":"<ul> <li>added data extracts to avoid creating tasks with no features</li> </ul>"},{"location":"CHANGELOG/#fix_6","title":"Fix","text":"<ul> <li>precommit</li> <li>check the lines count excluding minor highway tags</li> </ul>"},{"location":"CHANGELOG/#refactor_4","title":"Refactor","text":"<ul> <li>use default line length 88 (over 132)</li> </ul>"},{"location":"CHANGELOG/#122-2024-06-05","title":"1.2.2 (2024-06-05)","text":""},{"location":"CHANGELOG/#refactor_5","title":"Refactor","text":"<ul> <li>run sqlfluff and format sql files</li> <li>simplified the boundary of splitted ploygons and removed hardcoded buildings number</li> <li>removed redundant sql</li> <li>updated algorithm to split aoi when no linear features, by clustering</li> </ul>"},{"location":"CHANGELOG/#121-2024-03-21","title":"1.2.1 (2024-03-21)","text":""},{"location":"CHANGELOG/#fix_7","title":"Fix","text":"<ul> <li>clip square grid with AOI</li> </ul>"},{"location":"CHANGELOG/#120-2024-03-08","title":"1.2.0 (2024-03-08)","text":""},{"location":"CHANGELOG/#feat_3","title":"Feat","text":"<ul> <li>refactor out geopandas entirely, use shapely</li> </ul>"},{"location":"CHANGELOG/#112-2024-02-15","title":"1.1.2 (2024-02-15)","text":""},{"location":"CHANGELOG/#fix_8","title":"Fix","text":"<ul> <li>add useStWithin=False for polyline extracts</li> <li>add aeroway tag for linestring extract generation</li> <li>add railway tag to generated data extracts</li> <li>selecting all geometries if no data extract included</li> <li>more flexible parsing of extract tags</li> <li>update ST_Contains --&gt; ST_Intersects for polylines view</li> <li>improve error handling if json file input invalid</li> <li>merge aoi geoms prior to data extract generation</li> <li>bug parsing geojson tags key if string</li> </ul>"},{"location":"CHANGELOG/#refactor_6","title":"Refactor","text":"<ul> <li>remove ValueError if no geoms generated</li> </ul>"},{"location":"CHANGELOG/#111-2024-02-11","title":"1.1.1 (2024-02-11)","text":""},{"location":"CHANGELOG/#fix_9","title":"Fix","text":"<ul> <li>allow for automatic data extract generation</li> <li>more flexible parsing of aoi for split_by_sql</li> </ul>"},{"location":"CHANGELOG/#110-2024-02-08","title":"1.1.0 (2024-02-08)","text":""},{"location":"CHANGELOG/#feat_4","title":"Feat","text":"<ul> <li>parse multigeom aois with convex hull</li> </ul>"},{"location":"CHANGELOG/#fix_10","title":"Fix","text":"<ul> <li>command line usage of split by sql algo</li> </ul>"},{"location":"CHANGELOG/#refactor_7","title":"Refactor","text":"<ul> <li>replace data extract parsing with staticmethod</li> </ul>"},{"location":"CHANGELOG/#100-2024-01-30","title":"1.0.0 (2024-01-30)","text":""},{"location":"CHANGELOG/#fix_11","title":"Fix","text":"<ul> <li>also accept sqlalchemy.orm.Session objects</li> <li>num_buildings is int type (not str)</li> </ul>"},{"location":"CHANGELOG/#refactor_8","title":"Refactor","text":"<ul> <li>suppress geopandas 'column does not contain geometry'</li> </ul>"},{"location":"CHANGELOG/#100rc0-2024-01-21","title":"1.0.0rc0 (2024-01-21)","text":""},{"location":"CHANGELOG/#feat_5","title":"Feat","text":"<ul> <li>remove sqlalchemy and geoalchemy, use psycopg2 directly</li> </ul>"},{"location":"CHANGELOG/#fix_12","title":"Fix","text":"<ul> <li>cleanup view lines_view after splitting complete</li> </ul>"},{"location":"CHANGELOG/#refactor_9","title":"Refactor","text":"<ul> <li>fix all linting errors for pre-commit</li> </ul>"},{"location":"CHANGELOG/#026-2024-01-18","title":"0.2.6 (2024-01-18)","text":""},{"location":"CHANGELOG/#fix_13","title":"Fix","text":"<ul> <li>invalid tag json parsing PR (#20)</li> </ul>"},{"location":"CHANGELOG/#025-2023-12-16","title":"0.2.5 (2023-12-16)","text":""},{"location":"CHANGELOG/#fix_14","title":"Fix","text":"<ul> <li>improve handling of tags as json str</li> <li>return error on empty or invalid data extract</li> </ul>"},{"location":"CHANGELOG/#024-2023-12-07","title":"0.2.4 (2023-12-07)","text":""},{"location":"CHANGELOG/#fix_15","title":"Fix","text":"<ul> <li>run drop_all for tables prior to create_all (if exist)</li> <li>split_by_sql if no data extract provided</li> </ul>"},{"location":"CHANGELOG/#023-2023-12-06","title":"0.2.3 (2023-12-06)","text":""},{"location":"CHANGELOG/#fix_16","title":"Fix","text":"<ul> <li>handle multiple geoms if within FeatureCollection</li> <li>correctly handle file context for outputGeojson</li> <li>fix parsing of Feature type, improve logging</li> <li>prevent attempting to parse paths &gt;250 chars (i.e. geojson)</li> </ul>"},{"location":"CHANGELOG/#022-2023-12-05","title":"0.2.2 (2023-12-05)","text":""},{"location":"CHANGELOG/#fix_17","title":"Fix","text":"<ul> <li>pass geojson as features, not geopandas df</li> <li>manage aoi parsing: geom, feat, featcol</li> <li>correct parsing of dict aoi objects</li> </ul>"},{"location":"CHANGELOG/#refactor_10","title":"Refactor","text":"<ul> <li>reduce verbosity of logging when parsing geojsons</li> <li>merge dict and str aoi parsing</li> </ul>"},{"location":"CHANGELOG/#021-2023-12-05","title":"0.2.1 (2023-12-05)","text":""},{"location":"CHANGELOG/#refactor_11","title":"Refactor","text":"<ul> <li>add comment to remove geopandas</li> </ul>"},{"location":"CHANGELOG/#020-2023-12-04","title":"0.2.0 (2023-12-04)","text":""},{"location":"CHANGELOG/#feat_6","title":"Feat","text":"<ul> <li>split by sql use osm_extracts and init db tables</li> <li>add helper functions for each split type</li> <li>add outputGeojson method</li> </ul>"},{"location":"CHANGELOG/#fix_18","title":"Fix","text":"<ul> <li>fix passing osm_extract via cmd line + api</li> <li>handle case where tags key is nested</li> <li>drop timestamp field is parsed in geojson</li> <li>sql splitting, commit transactions</li> <li>fix parsing of osm tags for db insert</li> <li>use gpd.read_file over GeoDataFrame.from_file</li> <li>add osm_id to ways_lines + ways_poly</li> <li>correctly pass args.dburl on cmd line</li> <li>correct extract highways into ways_lines</li> <li>drop of geojson type field if not exists</li> <li>use same session for all db queries</li> <li>refactor FMTMSplitter init to set aoi</li> <li>add db models to repo for generating tables</li> <li>update project_aoi geometry field --&gt; geom</li> </ul>"},{"location":"CHANGELOG/#refactor_12","title":"Refactor","text":"<ul> <li>command line to use helper functions</li> <li>split by feature</li> <li>split by square</li> </ul>"},{"location":"CHANGELOG/#010-2023-10-25","title":"0.1.0 (2023-10-25)","text":""},{"location":"CHANGELOG/#fix_19","title":"Fix","text":"<ul> <li>Add Doxygen and pvreverse support</li> <li>Add mkdocs config file</li> <li>Add mkdocs commentss to all classes and methods</li> <li>Add mkdocstrings-python to dependencies</li> <li>Ad dminimal doc support for mkdocs</li> <li>Add initial doc for the fmtm-splitter client</li> <li>Add workflow to update the wiki, probably won't work yet</li> <li>Supply the number of buildings per task at runtime</li> <li>Make the number of buildings parameter configurable at runtime</li> <li>Add something to the README.md doc</li> <li>Add screenshot of task splitting by feature</li> <li>standalone class &amp; script to genersate tasks within an AOI</li> <li>Add support to be installed by pip</li> <li>Add basic documentation files</li> </ul>"},{"location":"CHANGELOG/#refactor_13","title":"Refactor","text":"<ul> <li>rename LICENSE.md --&gt; LICENSE</li> <li>rename build-ci workflow build_ci</li> <li>remove refs to wiki</li> </ul>"},{"location":"LICENSE/","title":"GNU AFFERO GENERAL PUBLIC LICENSE","text":"<p>Version 3, 19 November 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"LICENSE/#preamble","title":"Preamble","text":"<p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"LICENSE/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"LICENSE/#0-definitions","title":"0. Definitions","text":"<p>\"This License\" refers to version 3 of the GNU Affero General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"LICENSE/#1-source-code","title":"1. Source Code","text":"<p>The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"LICENSE/#2-basic-permissions","title":"2. Basic Permissions","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"LICENSE/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"LICENSE/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"LICENSE/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified   it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is   released under this License and any conditions added under   section 7. This requirement modifies the requirement in section 4   to \"keep intact all notices\".</li> <li>c) You must license the entire work, as a whole, under this   License to anyone who comes into possession of a copy. This   License will therefore apply, along with any applicable section 7   additional terms, to the whole of the work, and all its parts,   regardless of how they are packaged. This License gives no   permission to license the work in any other way, but it does not   invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display   Appropriate Legal Notices; however, if the Program has interactive   interfaces that do not display Appropriate Legal Notices, your   work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"LICENSE/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product   (including a physical distribution medium), accompanied by the   Corresponding Source fixed on a durable physical medium   customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product   (including a physical distribution medium), accompanied by a   written offer, valid for at least three years and valid for as   long as you offer spare parts or customer support for that product   model, to give anyone who possesses the object code either (1) a   copy of the Corresponding Source for all the software in the   product that is covered by this License, on a durable physical   medium customarily used for software interchange, for a price no   more than your reasonable cost of physically performing this   conveying of source, or (2) access to copy the Corresponding   Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the   written offer to provide the Corresponding Source. This   alternative is allowed only occasionally and noncommercially, and   only if you received the object code with such an offer, in accord   with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated   place (gratis or for a charge), and offer equivalent access to the   Corresponding Source in the same way through the same place at no   further charge. You need not require recipients to copy the   Corresponding Source along with the object code. If the place to   copy the object code is a network server, the Corresponding Source   may be on a different server (operated by you or a third party)   that supports equivalent copying facilities, provided you maintain   clear directions next to the object code saying where to find the   Corresponding Source. Regardless of what server hosts the   Corresponding Source, you remain obligated to ensure that it is   available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,   provided you inform other peers where the object code and   Corresponding Source of the work are being offered to the general   public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"LICENSE/#7-additional-terms","title":"7. Additional Terms","text":"<p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the   terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or   author attributions in that material or in the Appropriate Legal   Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,   or requiring that modified versions of such material be marked in   reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors   or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some   trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that   material by anyone who conveys the material (or modified versions   of it) with contractual assumptions of liability to the recipient,   for any liability that these contractual assumptions directly   impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"LICENSE/#8-termination","title":"8. Termination","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"LICENSE/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"LICENSE/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"LICENSE/#11-patents","title":"11. Patents","text":"<p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"LICENSE/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"LICENSE/#13-remote-network-interaction-use-with-the-gnu-general-public-license","title":"13. Remote Network Interaction; Use with the GNU General Public License","text":"<p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p>"},{"location":"LICENSE/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"LICENSE/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"LICENSE/#16-limitation-of-liability","title":"16. Limitation of Liability","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"LICENSE/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"LICENSE/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"about/","title":"fmtm-splitter","text":"<p>This is a project for splitting a large Area Of Interest into smaller tasks.</p>"},{"location":"api/","title":"API Docs for fmtm-splitter","text":""},{"location":"api/#fmtm_splitterpy","title":"fmtm_splitter.py","text":"<p>               Bases: <code>object</code></p> <p>A class to split polygons.</p> <p>Parameters:</p> Name Type Description Default <code>aoi_obj</code> <code>(str, FeatureCollection)</code> <p>Input AOI, either a file path, or GeoJSON string.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>instance</code> <code>FMTMSplitter</code> <p>An instance of this class</p> Source code in <code>fmtm_splitter/splitter.py</code> <pre><code>def __init__(\n    self,\n    aoi_obj: Optional[Union[str, FeatureCollection, dict]] = None,\n):\n    \"\"\"This class splits a polygon into tasks using a variety of algorithms.\n\n    Args:\n        aoi_obj (str, FeatureCollection): Input AOI, either a file path,\n            or GeoJSON string.\n\n    Returns:\n        instance (FMTMSplitter): An instance of this class\n    \"\"\"\n    # Parse AOI, merge if multiple geometries\n    if aoi_obj:\n        geojson = self.input_to_geojson(aoi_obj)\n        self.aoi = self.geojson_to_shapely_polygon(geojson)\n\n    # Init split features\n    self.split_features = None\n</code></pre> <p>options: show_source: true</p>"},{"location":"api/#fmtm_splitter.splitter.FMTMSplitter.input_to_geojson","title":"input_to_geojson  <code>staticmethod</code>","text":"<pre><code>input_to_geojson(input_data, merge=False)\n</code></pre> <p>Parse input data consistently to a GeoJSON obj.</p> Source code in <code>fmtm_splitter/splitter.py</code> <pre><code>@staticmethod\ndef input_to_geojson(\n    input_data: Union[str, FeatureCollection, dict], merge: bool = False\n) -&gt; GeoJSON:\n    \"\"\"Parse input data consistently to a GeoJSON obj.\"\"\"\n    log.info(f\"Parsing GeoJSON from type {type(input_data)}\")\n    if (\n        isinstance(input_data, str)\n        and len(input_data) &lt; 250\n        and Path(input_data).is_file()\n    ):\n        # Impose restriction for path lengths &lt;250 chars\n        with open(input_data, \"r\") as jsonfile:\n            try:\n                parsed_geojson = geojson.load(jsonfile)\n            except json.decoder.JSONDecodeError as e:\n                raise IOError(\n                    f\"File exists, but content is invalid JSON: {input_data}\"\n                ) from e\n\n    elif isinstance(input_data, FeatureCollection):\n        parsed_geojson = input_data\n    elif isinstance(input_data, dict):\n        parsed_geojson = geojson.loads(geojson.dumps(input_data))\n    elif isinstance(input_data, str):\n        geojson_truncated = (\n            input_data if len(input_data) &lt; 250 else f\"{input_data[:250]}...\"\n        )\n        log.debug(f\"GeoJSON string passed: {geojson_truncated}\")\n        parsed_geojson = geojson.loads(input_data)\n    else:\n        err = (\n            f\"The specified AOI is not valid (must be geojson or str): {input_data}\"\n        )\n        log.error(err)\n        raise ValueError(err)\n\n    return parsed_geojson\n</code></pre>"},{"location":"api/#fmtm_splitter.splitter.FMTMSplitter.geojson_to_featcol","title":"geojson_to_featcol  <code>staticmethod</code>","text":"<pre><code>geojson_to_featcol(geojson)\n</code></pre> <p>Standardise any geojson type to FeatureCollection.</p> Source code in <code>fmtm_splitter/splitter.py</code> <pre><code>@staticmethod\ndef geojson_to_featcol(\n    geojson: Union[FeatureCollection, Feature, dict],\n) -&gt; FeatureCollection:\n    \"\"\"Standardise any geojson type to FeatureCollection.\"\"\"\n    # Parse and unparse geojson to extract type\n    if isinstance(geojson, FeatureCollection):\n        # Handle FeatureCollection nesting\n        features = geojson.get(\"features\", [])\n    elif isinstance(geojson, Feature):\n        # Must be a list\n        features = [geojson]\n    else:\n        # A standard geometry type. Has coordinates, no properties\n        features = [Feature(geometry=geojson)]\n    return FeatureCollection(features)\n</code></pre>"},{"location":"api/#fmtm_splitter.splitter.FMTMSplitter.geojson_to_shapely_polygon","title":"geojson_to_shapely_polygon  <code>staticmethod</code>","text":"<pre><code>geojson_to_shapely_polygon(geojson)\n</code></pre> <p>Parse GeoJSON and return shapely Polygon.</p> <p>The GeoJSON may be of type FeatureCollection, Feature, or Polygon, but should only contain one Polygon geometry in total.</p> Source code in <code>fmtm_splitter/splitter.py</code> <pre><code>@staticmethod\ndef geojson_to_shapely_polygon(\n    geojson: Union[FeatureCollection, Feature, dict],\n) -&gt; Polygon:\n    \"\"\"Parse GeoJSON and return shapely Polygon.\n\n    The GeoJSON may be of type FeatureCollection, Feature, or Polygon,\n    but should only contain one Polygon geometry in total.\n    \"\"\"\n    features = FMTMSplitter.geojson_to_featcol(geojson).get(\"features\", [])\n    log.debug(\"Converting AOI to Shapely geometry\")\n\n    if len(features) == 0:\n        msg = \"The input AOI contains no geometries.\"\n        log.error(msg)\n        raise ValueError(msg)\n    elif len(features) &gt; 1:\n        msg = \"The input AOI cannot contain multiple geometries.\"\n        log.error(msg)\n        raise ValueError(msg)\n\n    return shape(features[0].get(\"geometry\"))\n</code></pre>"},{"location":"api/#fmtm_splitter.splitter.FMTMSplitter.meters_to_degrees","title":"meters_to_degrees","text":"<pre><code>meters_to_degrees(meters, reference_lat)\n</code></pre> <p>Converts meters to degrees at a given latitude.</p> <p>Using WGS84 ellipsoidal calculations.</p> <p>Parameters:</p> Name Type Description Default <code>meters</code> <code>float</code> <p>The distance in meters to convert.</p> required <code>reference_lat</code> <code>float</code> <p>The latitude at which to ,</p> required <p>Returns:</p> Type Description <code>Tuple[float, float]</code> <p>Tuple[float, float]: Degree values for latitude and longitude.</p> Source code in <code>fmtm_splitter/splitter.py</code> <pre><code>def meters_to_degrees(\n    self, meters: float, reference_lat: float\n) -&gt; Tuple[float, float]:\n    \"\"\"Converts meters to degrees at a given latitude.\n\n    Using WGS84 ellipsoidal calculations.\n\n    Args:\n        meters (float): The distance in meters to convert.\n        reference_lat (float): The latitude at which to ,\n        perform the conversion (in degrees).\n\n    Returns:\n        Tuple[float, float]: Degree values for latitude and longitude.\n    \"\"\"\n    # INFO:\n    # The geodesic distance is the shortest distance on the surface\n    # of an ellipsoidal model of the earth\n\n    lat_rad = math.radians(reference_lat)\n\n    # Using WGS84 parameters\n    a = 6378137.0  # Semi-major axis in meters\n    f = 1 / 298.257223563  # Flattening factor\n\n    # Applying formula\n    e2 = (2 * f) - (f**2)  # Eccentricity squared\n    n = a / math.sqrt(\n        1 - e2 * math.sin(lat_rad) ** 2\n    )  # Radius of curvature in the prime vertical\n    m = (\n        a * (1 - e2) / (1 - e2 * math.sin(lat_rad) ** 2) ** (3 / 2)\n    )  # Radius of curvature in the meridian\n\n    lat_deg_change = meters / m  # Latitude change in degrees\n    lon_deg_change = meters / (n * math.cos(lat_rad))  # Longitude change in degrees\n\n    # Convert changes to degrees by dividing by radians to degrees\n    lat_deg_change = math.degrees(lat_deg_change)\n    lon_deg_change = math.degrees(lon_deg_change)\n\n    return lat_deg_change, lon_deg_change\n</code></pre>"},{"location":"api/#fmtm_splitter.splitter.FMTMSplitter.splitBySquare","title":"splitBySquare","text":"<pre><code>splitBySquare(meters, db, extract_geojson=None)\n</code></pre> <p>Split the polygon into squares.</p> <p>Parameters:</p> Name Type Description Default <code>meters</code> <code>int</code> <p>The size of each task square in meters.</p> required <code>db</code> <code>(str, connection)</code> <p>The db url, format: postgresql://myusername:mypassword@myhost:5432/mydatabase OR an psycopg2 connection object object that is reused. Passing an connection object prevents requiring additional database connections to be spawned.</p> required <code>extract_geojson</code> <code>(dict, FeatureCollection)</code> <p>an OSM extract geojson, containing building polygons, or linestrings.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>data</code> <code>FeatureCollection</code> <p>A multipolygon of all the task boundaries.</p> Source code in <code>fmtm_splitter/splitter.py</code> <pre><code>def splitBySquare(  # noqa: N802\n    self,\n    meters: int,\n    db: Union[str, connection],\n    extract_geojson: Optional[Union[dict, FeatureCollection]] = None,\n) -&gt; FeatureCollection:\n    \"\"\"Split the polygon into squares.\n\n    Args:\n        meters (int):  The size of each task square in meters.\n        db (str, psycopg2.extensions.connection): The db url, format:\n            postgresql://myusername:mypassword@myhost:5432/mydatabase\n            OR an psycopg2 connection object object that is reused.\n            Passing an connection object prevents requiring additional\n            database connections to be spawned.\n        extract_geojson (dict, FeatureCollection): an OSM extract geojson,\n            containing building polygons, or linestrings.\n\n    Returns:\n        data (FeatureCollection): A multipolygon of all the task boundaries.\n    \"\"\"\n    log.debug(\"Splitting the AOI by squares\")\n\n    xmin, ymin, xmax, ymax = self.aoi.bounds\n\n    reference_lat = (ymin + ymax) / 2\n    length_deg, width_deg = self.meters_to_degrees(meters, reference_lat)\n\n    # Create grid columns and rows based on the AOI bounds\n    cols = np.arange(xmin, xmax + width_deg, width_deg)\n    rows = np.arange(ymin, ymax + length_deg, length_deg)\n\n    with create_connection(db) as conn:\n        with conn.cursor() as cur:\n            # Drop the table if it exists\n            cur.execute(\"DROP TABLE IF EXISTS temp_polygons;\")\n            # Create temporary table\n            cur.execute(\"\"\"\n                CREATE TEMP TABLE temp_polygons (\n                    id SERIAL PRIMARY KEY,\n                    geom GEOMETRY(GEOMETRY, 4326),\n                    area DOUBLE PRECISION\n                );\n            \"\"\")\n\n            extract_geoms = []\n            if extract_geojson:\n                features = (\n                    extract_geojson.get(\"features\", extract_geojson)\n                    if isinstance(extract_geojson, dict)\n                    else extract_geojson.features\n                )\n                extract_geoms = [shape(feature[\"geometry\"]) for feature in features]\n\n            # Generate grid polygons and clip them by AOI\n            polygons = []\n            for x in cols[:-1]:\n                for y in rows[:-1]:\n                    grid_polygon = box(x, y, x + width_deg, y + length_deg)\n                    clipped_polygon = grid_polygon.intersection(self.aoi)\n\n                    if clipped_polygon.is_empty:\n                        continue\n\n                    # Check intersection with extract geometries if available\n                    if extract_geoms:\n                        if any(\n                            geom.centroid.within(clipped_polygon)\n                            for geom in extract_geoms\n                        ):\n                            polygons.append(\n                                (clipped_polygon.wkt, clipped_polygon.wkt)\n                            )\n\n                    else:\n                        polygons.append((clipped_polygon.wkt, clipped_polygon.wkt))\n\n            insert_query = \"\"\"\n                    INSERT INTO temp_polygons (geom, area)\n                    SELECT ST_GeomFromText(%s, 4326),\n                    ST_Area(ST_GeomFromText(%s, 4326)::geography)\n                \"\"\"\n\n            if polygons:\n                cur.executemany(insert_query, polygons)\n\n            area_threshold = 0.35 * (meters**2)\n\n            cur.execute(\n                \"\"\"\n                DO $$\n                DECLARE\n                    small_polygon RECORD;\n                    nearest_neighbor RECORD;\n                BEGIN\n                DROP TABLE IF EXISTS small_polygons;\n                CREATE TEMP TABLE small_polygons As\n                    SELECT id, geom, area\n                    FROM temp_polygons\n                    WHERE area &lt; %s;\n                FOR small_polygon IN SELECT * FROM small_polygons\n                LOOP\n                    FOR nearest_neighbor IN\n                    SELECT id,\n                        lp.geom AS large_geom,\n                        ST_LENGTH2D(\n                        ST_INTERSECTION(small_polygon.geom, geom)\n                        ) AS shared_bound\n                    FROM temp_polygons lp\n                    WHERE id NOT IN (SELECT id FROM small_polygons)\n                    AND ST_Touches(small_polygon.geom, lp.geom)\n                    AND ST_GEOMETRYTYPE(\n                    ST_INTERSECTION(small_polygon.geom, geom)\n                    ) != 'ST_Point'\n                    ORDER BY shared_bound DESC\n                    LIMIT 1\n                    LOOP\n                        UPDATE temp_polygons\n                        SET geom = ST_UNION(small_polygon.geom, geom)\n                        WHERE id = nearest_neighbor.id;\n\n                        DELETE FROM temp_polygons WHERE id = small_polygon.id;\n                        EXIT;\n                    END LOOP;\n                END LOOP;\n                END $$;\n            \"\"\",\n                (area_threshold,),\n            )\n\n            cur.execute(\n                \"\"\"\n                SELECT\n                JSONB_BUILD_OBJECT(\n                'type', 'FeatureCollection',\n                'features', JSONB_AGG(feature)\n                )\n                FROM(\n                SELECT JSONB_BUILD_OBJECT(\n                'type', 'Feature',\n                'properties', JSONB_BUILD_OBJECT('area', (t.area)),\n                'geometry', ST_ASGEOJSON(t.geom)::json\n                ) AS feature\n                FROM temp_polygons as t\n                ) AS features;\n                \"\"\"\n            )\n            self.split_features = cur.fetchone()[0]\n    return self.split_features\n</code></pre>"},{"location":"api/#fmtm_splitter.splitter.FMTMSplitter.splitBySQL","title":"splitBySQL","text":"<pre><code>splitBySQL(sql, db, buildings=None, osm_extract=None)\n</code></pre> <p>Split the polygon by features in the database using an SQL query.</p> <p>FIXME this requires some work to function with custom SQL.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to execute</p> required <code>db</code> <code>(str, connection)</code> <p>The db url, format: postgresql://myusername:mypassword@myhost:5432/mydatabase OR an psycopg2 connection object object that is reused. Passing an connection object prevents requiring additional database connections to be spawned.</p> required <code>buildings</code> <code>int</code> <p>The number of buildings in each task</p> <code>None</code> <code>osm_extract</code> <code>(dict, FeatureCollection)</code> <p>an OSM extract geojson, containing building polygons, or linestrings.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>data</code> <code>FeatureCollection</code> <p>A multipolygon of all the task boundaries.</p> Source code in <code>fmtm_splitter/splitter.py</code> <pre><code>def splitBySQL(  # noqa: N802\n    self,\n    sql: str,\n    db: Union[str, connection],\n    buildings: Optional[int] = None,\n    osm_extract: Optional[Union[dict, FeatureCollection]] = None,\n) -&gt; FeatureCollection:\n    \"\"\"Split the polygon by features in the database using an SQL query.\n\n    FIXME this requires some work to function with custom SQL.\n\n    Args:\n        sql (str): The SQL query to execute\n        db (str, psycopg2.extensions.connection): The db url, format:\n            postgresql://myusername:mypassword@myhost:5432/mydatabase\n            OR an psycopg2 connection object object that is reused.\n            Passing an connection object prevents requiring additional\n            database connections to be spawned.\n        buildings (int): The number of buildings in each task\n        osm_extract (dict, FeatureCollection): an OSM extract geojson,\n            containing building polygons, or linestrings.\n\n    Returns:\n        data (FeatureCollection): A multipolygon of all the task boundaries.\n    \"\"\"\n    # Validation\n    if buildings and not osm_extract:\n        msg = (\n            \"To use the FMTM splitting algo, an OSM data extract must be passed \"\n            \"via param `osm_extract` as a geojson dict or FeatureCollection.\"\n        )\n        log.error(msg)\n        raise ValueError(msg)\n\n    # Run custom SQL\n    if not buildings or not osm_extract:\n        log.info(\n            \"No `buildings` or `osm_extract` params passed, executing custom SQL\"\n        )\n        # FIXME untested\n        conn = create_connection(db)\n        splitter_cursor = conn.cursor()\n        log.debug(\"Running custom splitting algorithm\")\n        splitter_cursor.execute(sql)\n        features = splitter_cursor.fetchall()[0][0][\"features\"]\n        if features:\n            log.info(f\"Query returned {len(features)} features\")\n        else:\n            log.info(\"Query returned no features\")\n        self.split_features = FeatureCollection(features)\n        return self.split_features\n\n    # Get existing db engine, or create new one\n    conn = create_connection(db)\n\n    # Generate db tables if not exist\n    log.debug(\"Generating required temp tables\")\n    create_tables(conn)\n\n    # Add aoi to project_aoi table\n    aoi_to_postgis(conn, self.aoi)\n\n    def json_str_to_dict(json_item: Union[str, dict]) -&gt; dict:\n        \"\"\"Convert a JSON string to dict.\"\"\"\n        if isinstance(json_item, dict):\n            return json_item\n        if isinstance(json_item, str):\n            try:\n                return json.loads(json_item)\n            except json.JSONDecodeError:\n                msg = f\"Error decoding key in GeoJSON: {json_item}\"\n                log.error(msg)\n                # Set tags to empty, skip feature\n                return {}\n\n    # Insert data extract into db, using same cursor\n    log.debug(\"Inserting data extract into db\")\n    cur = conn.cursor()\n    for feature in osm_extract[\"features\"]:\n        # NOTE must handle format generated from FMTMSplitter __init__\n        wkb_element = shape(feature[\"geometry\"]).wkb_hex\n        properties = feature.get(\"properties\", {})\n        if \"tags\" in properties.keys():\n            # Sometimes tags are placed under tags key\n            tags = properties.get(\"tags\", {})\n        else:\n            # Sometimes tags are directly in properties\n            tags = properties\n\n        # Handle nested 'tags' key if present\n        tags = json_str_to_dict(tags).get(\"tags\", json_str_to_dict(tags))\n        osm_id = properties.get(\"osm_id\")\n\n        # Common attributes for db tables\n        common_args = dict(osm_id=osm_id, geom=wkb_element, tags=tags)\n\n        # Insert building polygons\n        if tags.get(\"building\") == \"yes\":\n            insert_geom(cur, \"ways_poly\", **common_args)\n\n        # Insert highway/waterway/railway polylines\n        elif any(key in tags for key in [\"highway\", \"waterway\", \"railway\"]):\n            insert_geom(cur, \"ways_line\", **common_args)\n\n    # Use raw sql for view generation &amp; remainder of script\n    # TODO get geom from project_aoi table instead of wkb string\n    log.debug(\"Creating db view with intersecting polylines\")\n    view = (\n        \"DROP VIEW IF EXISTS lines_view;\"\n        \"CREATE VIEW lines_view AS SELECT \"\n        \"tags,geom FROM ways_line WHERE \"\n        \"ST_Intersects(ST_SetSRID(CAST(%s AS GEOMETRY), 4326), geom)\"\n    )\n    cur.execute(view, (self.aoi.wkb_hex,))\n    # Close current cursor\n    cur.close()\n\n    splitter_cursor = conn.cursor()\n    log.debug(\"Running task splitting algorithm\")\n    splitter_cursor.execute(sql, {\"num_buildings\": buildings})\n\n    features = splitter_cursor.fetchall()[0][0][\"features\"]\n    if features:\n        log.info(f\"Query returned {len(features)} features\")\n    else:\n        log.info(\"Query returned no features\")\n\n    self.split_features = FeatureCollection(features)\n\n    # Drop tables &amp; close (+commit) db connection\n    drop_tables(conn)\n    close_connection(conn)\n\n    return self.split_features\n</code></pre>"},{"location":"api/#fmtm_splitter.splitter.FMTMSplitter.splitByFeature","title":"splitByFeature","text":"<pre><code>splitByFeature(features)\n</code></pre> <p>Split the polygon by features in the database.</p> <p>Parameters:</p> Name Type Description Default <code>features(FeatureCollection)</code> <p>FeatureCollection of features to polygonise and return.</p> required <p>Returns:</p> Name Type Description <code>data</code> <code>FeatureCollection</code> <p>A multipolygon of all the task boundaries.</p> Source code in <code>fmtm_splitter/splitter.py</code> <pre><code>def splitByFeature(  # noqa: N802\n    self,\n    features: FeatureCollection,\n) -&gt; FeatureCollection:\n    \"\"\"Split the polygon by features in the database.\n\n    Args:\n        features(FeatureCollection): FeatureCollection of features\n            to polygonise and return.\n\n    Returns:\n        data (FeatureCollection): A multipolygon of all the task boundaries.\n    \"\"\"\n    log.debug(\"Polygonising the FeatureCollection features\")\n    # Extract all geometries from the input features\n    geometries = []\n    for feature in features[\"features\"]:\n        geom = feature[\"geometry\"]\n        if geom[\"type\"] == \"Polygon\":\n            geometries.append(shape(geom))\n        elif geom[\"type\"] == \"LineString\":\n            geometries.append(shape(geom))\n        else:\n            log.warning(f\"Ignoring unsupported geometry type: {geom['type']}\")\n\n    # Create a single MultiPolygon from all the polygons and linestrings\n    multi_polygon = unary_union(geometries)\n\n    # Clip the multi_polygon by the AOI boundary\n    clipped_multi_polygon = multi_polygon.intersection(self.aoi)\n\n    polygon_features = [\n        Feature(geometry=polygon) for polygon in list(clipped_multi_polygon.geoms)\n    ]\n\n    # Convert the Polygon Features into a FeatureCollection\n    self.split_features = FeatureCollection(features=polygon_features)\n\n    return self.split_features\n</code></pre>"},{"location":"api/#fmtm_splitter.splitter.FMTMSplitter.outputGeojson","title":"outputGeojson","text":"<pre><code>outputGeojson(filename='output.geojson')\n</code></pre> <p>Output a geojson file from split features.</p> Source code in <code>fmtm_splitter/splitter.py</code> <pre><code>def outputGeojson(  # noqa: N802\n    self,\n    filename: str = \"output.geojson\",\n) -&gt; None:\n    \"\"\"Output a geojson file from split features.\"\"\"\n    if not self.split_features:\n        msg = \"Feature splitting has not been executed. Do this first.\"\n        log.error(msg)\n        raise RuntimeError(msg)\n\n    with open(filename, \"w\") as jsonfile:\n        geojson.dump(self.split_features, jsonfile)\n        log.debug(f\"Wrote split features to {filename}\")\n</code></pre>"},{"location":"splitting-algorithm/","title":"The AOI Splitting Algorithm","text":"<p>For now (as of 19-12-2024), this algorithm is entirely focused on splitting polygon features such as buildings.</p>"},{"location":"splitting-algorithm/#how-it-works","title":"How It Works","text":"<p>Note</p> <pre><code>For ease of understanding, I will replace the word 'feature'\nwith 'building' in the following description. But the word\n'building' could in theory be substituted by any feature type.\n</code></pre>"},{"location":"splitting-algorithm/#1-split-aoi-by-linear-features","title":"1. Split AOI By Linear Features","text":"<ul> <li>First we divide up the AOI into polygons, based on the provided   bisecting features such as roads, rivers, and railways.</li> <li>To do this we:<ul> <li>Polygonize the linear features.</li> <li>Centroid the features to make sure they only get counted in one       splitpolygon.</li> <li>Clip by the AOI polygon.</li> </ul> </li> <li>We get the database table <code>polygonsnocount</code>.</li> <li>Polygons with zero or too few features are merged into neighbours.</li> </ul> <p>Output: Polygons covering the AOI area.</p> <p>[image here]</p>"},{"location":"splitting-algorithm/#2-group-buildings-by-polygon","title":"2. Group Buildings By Polygon","text":"<ul> <li>Next we take our buildings, insert into db table <code>buildings</code>, then find   the polygon each building centroid is located within.</li> <li>Now we create the next table <code>splitpolygons</code> where we add the count of   the total number of buildings within each polygon, plus the polygon   area.</li> </ul> <p>Output: Building dataset tagged with their containing polygon's ID.</p> <p>[image here]</p>"},{"location":"splitting-algorithm/#3-cluster-the-buildings","title":"3. Cluster The Buildings","text":"<ul> <li>For each polygon containing buildings, we pass through a K-Means clustering   algorithm, to output X number of clusters.</li> <li>X is calculated as:<pre><code>  ```bash\n  (T / A) + 1\n  T - Total building count\n  A - Average number of buildings desired per cluster\n  ```\n</code></pre> </li> </ul> <p>Info</p> <pre><code>K-Means will group buildings based on their spatial proximity, ideally\ngrouping together buildings that are close together (reducing walking\ndistance for mappers in the field).\n</code></pre> <ul> <li>We create a table <code>clusteredbuildings</code> where we have the original buildings,   plus their assigned cluster ID from K-Means.<ul> <li>The field <code>clusteruid</code> is a composite of <code>polygonid '-' clusterid</code>.</li> <li>The <code>clusterid</code> is specific to the containing polygon (starting from 0).</li> <li>For example polygon <code>377</code> will have IDs <code>377-0</code>, <code>377-1</code>, <code>377-2</code>.</li> </ul> </li> </ul> <p>Tip</p> <pre><code>Using K-Means, we should be aware:\n\n- Edge cases: sparse areas may create clusters with few buildings,\nand dense areas could result in many overlapping clusters.\n- Trial and error: the clustering quality depends on fine-tuning the\naverage number of buildings per cluster.\n</code></pre> <p>Output: Building dataset tagged with their containing polygon's ID, plus a cluster ID specific to the polygon.</p> <p>[image here]</p>"},{"location":"splitting-algorithm/#4-enclose-the-buildings","title":"4. Enclose The Buildings","text":"<p>Info</p> <pre><code>We previously used a Voronoi based approach:\n\n1. Densify the buildings to reduce the impact of long edges\n(maximum edge 0.00004 degrees).\n2. Dump the building polygons into points.\n3. Create a Voronoi diagram (a technique to divide up the points within\nan area into polygons, where each final polygon contains the closest\n'neighbour' points from the clusters in the previous step).\nThis approach had some flaws, so we have attempted other approaches, below.\n</code></pre> <ul> <li>Divide up each cluster into polygons using convex hulls.</li> <li>Here we essentially form small 'islands' of buildings.</li> <li>Fixing polygon overlaps:       - We may have a few polygon overlaps, where a building could fall between  two polygon areas.       - To solve this, we find all of the overlapping 'shards', and subtract    from the polygon area.       - We then union all de-overlapped hulls with their buildings (the    de-overlapping will have left some feature polygons partially and    maybe wholly outside of their home polygons, this should restore    them without creating new overlaps unless the features themselves    are overlapping, in which case there isn't a great solution).</li> </ul> <p>Output: Task polygons that don't overlap and fully enclose all features, that don't have jagged / complex edges.</p> <p>[image here]</p>"},{"location":"splitting-algorithm/#5-filling-the-negative-space","title":"5. Filling The Negative Space","text":"<ul> <li>Now we have our 'islands' of buildings, this would be fine if we knew   for certain that they contained every possible building in the field.</li> <li>However, in the real world, we may have missed some buildings, so the   task areas should be expanded out to cover the entire AOI footprint.</li> <li>We can create a 'negative' space multipolygon by subtracting the hulls   from the AOI.</li> <li>The 'negative' space multipolygon can be filled using the   'straight skeleton' algorithm:       - This is essentially a Voronoi algorithm, but for polygons    instead of points! (not exactly, but it's an analogy)       - The algorithm will work on the edges and corners of the 'hull'    polygons, to generate bounding 'filler' polygons between them.<ul> <li>It will perfectly bisect between buildings or polygon areas,  instead of creating wavy / zig-zag boundaries.</li> </ul> </li> <li>Finally, we identify the edge-sharing neighbor hull of each element   of the polygonized skeleton, dissolve them into those neighbors.</li> </ul> <p>Info</p> <pre><code>- Voronoi diagrams divide space based on distances to points or\npolygons, creating regions with perpendicular bisectors.\n- Straight skeletons shrink polygon edges inward at equal speed\nto create a network of lines (skeleton) and subdivided polygons.\nIt\u2019s more about preserving the shape of polygons rather than\ndistance-based partitioning.\n</code></pre> <p>Output: Split task area polygons.</p> <p>The original buildings, including tag data, can be superimposed on to these task polygons, to assign them to each task area.</p> <p>[image here]</p>"},{"location":"splitting-algorithm/#6-alignment-of-task-areas-optional","title":"6. Alignment Of Task Areas (Optional)","text":"<ul> <li>The final problem here is aligning the polygon areas back with the   linear features, as they may have shifted slightly during all the   processing!       - For example the task boundaries should ideally align in the    center of a highway polylin.       - Using a window function, we can essentially run the same steps    as above, but for each specific cluster area, instead of the    whole AOI, reducing the drift from the linear features.</li> </ul> <p>Output: Split task area polygons, better aligned to linear features.</p> <p>[image here]</p>"},{"location":"splitting-algorithm/#requirements-future-plans","title":"Requirements &amp; Future Plans","text":"<p>Input from Ivan Gayton @ 18/12/2024</p>"},{"location":"splitting-algorithm/#input-datasets","title":"Input Datasets","text":""},{"location":"splitting-algorithm/#aoi","title":"AOI","text":"<ul> <li>Do some GeoJSON cleanup, CRS checking, and normalise to a specific format.</li> <li>Ideally we just have a Polygon GeoJSON.</li> </ul>"},{"location":"splitting-algorithm/#splitting-lines-linear-features","title":"Splitting Lines (Linear Features)","text":"<ul> <li>Allow polyline input from sources other than OSM.</li> <li>From OSM:       - Polylines: default all, but user configurable (major vs minor highways, etc).<ul> <li>Polygons: filter tags for traffic circles, water bodies, etc, then split into   polylines.</li> </ul> </li> </ul> <p>In both cases, we likely only need the geometry, no tags.</p>"},{"location":"splitting-algorithm/#map-features","title":"Map Features","text":"<ul> <li>Points:<ul> <li>Geometries, plus tags.</li> <li>Centroids of polygons.</li> <li>Midpoint of polylines.</li> </ul> </li> </ul> <ul> <li>Polylines:<ul> <li>Geometries, plus tags.</li> <li>Convert relevant polygons such as traffic circles / water bodies into       polylines.</li> <li>Split roads at all intersections, so that every polyline constitutes an       edge in a graph.</li> </ul> </li> </ul> <ul> <li>Polygons:<ul> <li>Geometries, plus tags.</li> <li>Convert multipolygons (like OSM buildings with holes) into simple polygons for   the purpose of splitting (maybe we want the multipolygons to send to the data   collection app later, but for splitting we definitely don't want holes).</li> <li>Do some checking/cleaning for invalid geometries.</li> </ul> </li> </ul>"},{"location":"splitting-algorithm/#output-datasets","title":"Output Datasets","text":"<p>We need the following datasets of geometries, but probably not any tags associated:</p> <pre><code>- AOI\n- Splitlines\n- Features\n</code></pre> <p>The original features should probably be retained for later use in the actual data collection (e.g. conflation), but for splitting purposes we don't need all the tags and fields, and we definitely don't want any complex geometry.</p>"},{"location":"splitting-algorithm/#extra-work","title":"Extra Work","text":"<p>Large task polygons:</p> <ul> <li>We might need to check for task polygons that are too big.</li> <li>If there are regions with sparse features, they might end   up with giant task polygons, in which case we might want to   sub-split them (maybe into squares).</li> </ul>"},{"location":"splitting-algorithm/#testing-the-workflow-in-qgis","title":"Testing The Workflow In QGIS","text":""},{"location":"splitting-algorithm/#running-bleeding-edge-postgis-locally","title":"Running Bleeding-Edge PostGIS Locally","text":"<p>First you may need to set up a local Postgres database, including the latest bleeding-edge version of PostGIS and SFCGAL.</p> <p>The easiest way is via Docker (single command):</p> <pre><code>    ```bash\n    docker run --name aoi-splitting-db --detach \\\n      -p 5432:5432 -v ./db_data:/var/lib/postgresql/data/  \\\n      -e POSTGRES_USER=hotosm \\\n      -e POSTGRES_PASSWORD=hotosm \\\n      -e POSTGRES_DB=splitter \\\n      docker.io/postgis/postgis:17-master \\\n    &amp;&amp; sleep 5 \\\n    &amp;&amp; docker exec aoi-splitting-db psql -d splitter -U hotosm -c \\\n      'CREATE EXTENSION IF NOT EXISTS postgis_sfcgal WITH SCHEMA public;'\n    ```\n</code></pre> <p>The instance will be available:</p> <pre><code>- Host: `localhost`\n- Port: `5432`\n- Database: `splitter`\n- User `hotosm`\n- Password `hotosm`\n</code></pre> <p>Note</p> <pre><code>Changing the port on the left side in the command `8888:5432`,\nwill make Postgres available on a different port for you.\n</code></pre>"},{"location":"splitting-algorithm/#importing-osm-data","title":"Importing OSM Data","text":"<p>Get the raw-data-api Lua OSM import script:</p> <pre><code>    ```bash\n    curl -LO https://raw.githubusercontent.com/hotosm/osm-rawdata/refs/heads/main/osm_rawdata/import/raw.lua\n    ```\n</code></pre> <p>Download some data from GeoFabrik:</p> <pre><code>     &lt;https://download.geofabrik.de&gt;\n</code></pre> <p>Import into Postgres:</p> <pre><code>    ```bash\n    osm2pgsql --create -H localhost -U hotosm -P 5432 -d splitter \\\n      -W --extra-attributes --output=flex --style ./raw.lua \\\n      /your-geofabrik-file.osm.pbf\n    ```\n</code></pre>"},{"location":"splitting-algorithm/#qgis-db-manager","title":"QGIS DB Manager","text":"<ul> <li>Install the QGIS DB Manager plugin.</li> <li>View the geoms you just added.</li> <li>Run each step of the splitting algorithm SQL sequentially.</li> <li>View the intermediary tables and geometries created.</li> <li>More detailed instructions to come!</li> </ul>"},{"location":"testing-via-ui/","title":"Testing FMTM Splitter Visually","text":"<p>Sometimes a GeoJSON printed to the terminal just doesn't cut it...</p> <p>If you wish to view the split data output in a more visual way:</p>"},{"location":"testing-via-ui/#option-1-geojsonio","title":"Option 1: GeoJSON.io","text":"<ol> <li>Generate a geojson bbox via geojson.io</li> <li>Copy the content into <code>output/input.geojson</code> in this repo.</li> <li> <p>Run the splitting algorithm:</p> <pre><code>docker compose run --rm splitter fmtm-splitter \\\n    --boundary output/input.geojson \\\n    --outfile output/output.geojson \\\n    --number 50\n</code></pre> <p>Note: a data extract will be generated for you.</p> </li> <li> <p>Copy the data from <code>output/output.geojson</code> to geojson.io to visualise.</p> </li> </ol> <p>Note: to include a custom data extract, pass the <code>--extract</code> flag point to a geojson file.</p>"},{"location":"testing-via-ui/#option-2-fmtm","title":"Option 2: FMTM","text":"<ol> <li> <p>Setup FMTM:</p> <pre><code>git clone https://github.com/hotosm/fmtm.git\ncd fmtm\ncp .env.example .env\n\n# Open docker-compose.yml and uncomment\n- ../osm-rawdata/osm_rawdata:/home/appuser/.local/lib/python3.10/site-packages/osm_rawdata\n\n# Run FMTM\ndocker compose up -d\n</code></pre> </li> <li> <p>Go to the FMTM dashboard</p> </li> <li>Create a new project.</li> <li>Upload your project AOI.</li> <li>Upload or generate a data extract.</li> <li>On the task splitting page, select <code>Task Splitting Algorithm</code>.</li> <li>Then click <code>Click to generate tasks</code> to see the algorithm output.</li> </ol>"},{"location":"usage/","title":"fmtm-splitter","text":"<p>This program splits a Polygon AOI into tasks using a varity of algorithms.</p> <pre><code>    options:\n      -h, --help            show this help message and exit\n      -v, --verbose         verbose output\n      -o OUTFILE, --outfile OUTFILE\n          Output file from splitting\n      -m METERS, --meters METERS\n          Size in meters if using square splitting\n      -number NUMBER, --number NUMBER\n          Number of buildings in a task\n      -b BOUNDARY, --boundary BOUNDARY\n          Polygon AOI\n      -s SOURCE, --source SOURCE\n          Source data, Geojson or PG:[dbname]\n      -c CUSTOM, --custom CUSTOM\n          Custom SQL query for database\n      -db DATABASE, --dburl DATABASE\n          The database url string to custom sql\n</code></pre> <p>The data source for existing data can be either the data extract used by the XLSForm, or a postgresql database.</p>"},{"location":"usage/#examples","title":"Examples","text":""},{"location":"usage/#via-command-line","title":"Via Command Line","text":"<pre><code>fmtm-splitter -b AOI --meters 50\nfmtm-splitter -v -b AOI -s data.geojson\nfmtm-splitter -v -b AOI -s PG:colorado\n</code></pre> <p>Where AOI is the boundary of the project as a polygon And OUTFILE is a MultiPolygon output file,which defaults to fmtm.geojson The task splitting defaults to squares, 50 meters across. If -m is used then that also defaults to square splitting.</p>"},{"location":"usage/#with-custom-query","title":"With Custom Query","text":"<pre><code>fmtm-splitter -b AOI -c custom.sql\n</code></pre> <p>This will use a custom SQL query for splitting by map feature, and adjust task sizes based on the number of buildings.</p>"},{"location":"usage/#using-fmtm-splitting-algorithm","title":"Using FMTM Splitting Algorithm","text":"<pre><code>fmtm-splitter -b \"/path/to/aoi.geojson\" \\\n    -db \"postgresql://myuser:mypass@myhost:5432/mydb\" \\\n    -number 10 -e \"/path/to/extract.geojson\"\n</code></pre>"},{"location":"usage/#via-api","title":"Via API","text":""},{"location":"usage/#split-by-square","title":"Split By Square","text":"<pre><code>from fmtm_splitter.splitter import split_by_square\n\nfeatures = split_by_square(\n    \"path/to/your/file.geojson\",\n    meters=100,\n)\n</code></pre>"},{"location":"usage/#split-by-features","title":"Split By Features","text":"<pre><code>import geojson\nfrom fmtm_splitter.splitter import split_by_features\n\naoi_json = geojson.load(\"/path/to/file.geojson\")\n# Dump string to show that passing string json is possible too\nsplit_geom_json = geojson.dumps(geojson.load(\"/path/to/file.geojson\"))\n\nfeatures = split_by_features(\n    aoi_json,\n    split_geom_json,\n)\n</code></pre>"},{"location":"usage/#split-by-sql","title":"Split By SQL","text":"<pre><code>import geojson\nfrom fmtm_splitter.splitter import split_by_sql\n\naoi_json = geojson.load(\"/path/to/file.geojson\")\nextract_json = geojson.load(\"/path/to/file.geojson\")\n\nfeatures = split_by_sql(\n    aoi_json,\n    \"postgresql://myuser:mypass@myhost:5432/mydb\",\n    num_buildings=10,\n    osm_extract=extract_json,\n)\n</code></pre>"},{"location":"wiki_redirect/","title":"FMTM Splitter","text":"<p>Please see the docs page at: https://hotosm.github.io/fmtm-splitter/</p>"}]}